(function () {
  'use strict';

  function _arrayWithHoles(a){if(Array.isArray(a))return a}var arrayWithHoles=_arrayWithHoles;

  function _iterableToArrayLimit(a,b){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(a)){var c=[],d=!0,e=!1,f=void 0;try{for(var g,h=a[Symbol.iterator]();!(d=(g=h.next()).done)&&(c.push(g.value),!(b&&c.length===b));d=!0);}catch(a){e=!0,f=a;}finally{try{d||null==h["return"]||h["return"]();}finally{if(e)throw f}}return c}}var iterableToArrayLimit=_iterableToArrayLimit;

  function _arrayLikeToArray(a,b){(null==b||b>a.length)&&(b=a.length);for(var c=0,d=Array(b);c<b;c++)d[c]=a[c];return d}var arrayLikeToArray=_arrayLikeToArray;

  function _unsupportedIterableToArray(a,b){if(a){if("string"==typeof a)return arrayLikeToArray(a,b);var c=Object.prototype.toString.call(a).slice(8,-1);return "Object"===c&&a.constructor&&(c=a.constructor.name),"Map"===c||"Set"===c?Array.from(a):"Arguments"===c||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(c)?arrayLikeToArray(a,b):void 0}}var unsupportedIterableToArray=_unsupportedIterableToArray;

  function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var nonIterableRest=_nonIterableRest;

  function _slicedToArray(a,b){return arrayWithHoles(a)||iterableToArrayLimit(a,b)||unsupportedIterableToArray(a,b)||nonIterableRest()}var slicedToArray=_slicedToArray;

  function createCommonjsModule(fn, basedir, module) {
  	return module = {
  		path: basedir,
  		exports: {},
  		require: function (path, base) {
  			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
  		}
  	}, fn(module, module.exports), module.exports;
  }

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
  }

  var _typeof_1=createCommonjsModule(function(a){function b(c){"@babel/helpers - typeof";return a.exports="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?b=function(a){return typeof a}:b=function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},b(c)}a.exports=b;});

  var runtime_1=createCommonjsModule(function(a){
  var b=function(a){function b(a,b,c){return Object.defineProperty(a,b,{value:c,enumerable:!0,configurable:!0,writable:!0}),a[b]}function c(a,b,c,d){
  var f=b&&b.prototype instanceof e?b:e,g=Object.create(f.prototype),h=new n(d||[]);return g._invoke=j(a,c,h),g}
  function d(a,b,c){try{return {type:"normal",arg:a.call(b,c)}}catch(a){return {type:"throw",arg:a}}}
  function e(){}function f(){}function g(){}
  function h(a){["next","throw","return"].forEach(function(c){b(a,c,function(a){return this._invoke(c,a)});});}function i(a,b){function c(e,f,g,h){var i=d(a[e],a,f);if("throw"===i.type)h(i.arg);else {var j=i.arg,k=j.value;return k&&"object"===_typeof_1(k)&&r.call(k,"__await")?b.resolve(k.__await).then(function(a){c("next",a,g,h);},function(a){c("throw",a,g,h);}):b.resolve(k).then(function(a){j.value=a,g(j);},function(a){
  return c("throw",a,g,h)})}}function e(a,d){function e(){return new b(function(b,e){c(a,d,b,e);})}return f=
  f?f.then(e,
  e):e()}
  var f;this._invoke=e;}function j(a,b,c){var e="suspendedStart";return function(f,g){if("executing"===e)throw new Error("Generator is already running");if("completed"===e){if("throw"===f)throw g;
  return p()}for(c.method=f,c.arg=g;;){var h=c.delegate;if(h){var i=k(h,c);if(i){if(i===w)continue;return i}}if("next"===c.method)c.sent=c._sent=c.arg;else if("throw"===c.method){if("suspendedStart"===e)throw e="completed",c.arg;c.dispatchException(c.arg);}else "return"===c.method&&c.abrupt("return",c.arg);e="executing";var j=d(a,b,c);if("normal"===j.type){if(e=c.done?"completed":"suspendedYield",j.arg===w)continue;return {value:j.arg,done:c.done}}"throw"===j.type&&(
  e="completed",c.method="throw",c.arg=j.arg);}}}
  function k(a,b){var c=a.iterator[b.method];if(void 0===c){if(b.delegate=null,"throw"===b.method){
  if(a.iterator["return"]&&(b.method="return",b.arg=void 0,k(a,b),"throw"===b.method))
  return w;b.method="throw",b.arg=new TypeError("The iterator does not provide a 'throw' method");}return w}var e=d(c,a.iterator,b.arg);if("throw"===e.type)return b.method="throw",b.arg=e.arg,b.delegate=null,w;var f=e.arg;if(!f)return b.method="throw",b.arg=new TypeError("iterator result is not an object"),b.delegate=null,w;if(f.done)b[a.resultName]=f.value,b.next=a.nextLoc,"return"!==b.method&&(b.method="next",b.arg=void 0);else
  return f;
  return b.delegate=null,w}
  function l(a){var b={tryLoc:a[0]};1 in a&&(b.catchLoc=a[1]),2 in a&&(b.finallyLoc=a[2],b.afterLoc=a[3]),this.tryEntries.push(b);}function m(a){var b=a.completion||{};b.type="normal",delete b.arg,a.completion=b;}function n(a){this.tryEntries=[{tryLoc:"root"}],a.forEach(l,this),this.reset(!0);}function o(a){if(a){var b=a[t];if(b)return b.call(a);if("function"==typeof a.next)return a;if(!isNaN(a.length)){var c=-1,d=function b(){for(;++c<a.length;)if(r.call(a,c))return b.value=a[c],b.done=!1,b;return b.value=void 0,b.done=!0,b};return d.next=d}}
  return {next:p}}function p(){return {value:void 0,done:!0}}var q=Object.prototype,r=q.hasOwnProperty,s="function"==typeof Symbol?Symbol:{},t=s.iterator||"@@iterator",u=s.asyncIterator||"@@asyncIterator",v=s.toStringTag||"@@toStringTag";try{b({},"");}catch(a){b=function(a,b,c){return a[b]=c};}a.wrap=c;var w={},x={};x[t]=function(){return this};var y=Object.getPrototypeOf,z=y&&y(y(o([])));z&&z!==q&&r.call(z,t)&&(x=z);var A=g.prototype=e.prototype=Object.create(x);
  return f.prototype=A.constructor=g,g.constructor=f,f.displayName=b(g,v,"GeneratorFunction"),a.isGeneratorFunction=function(a){var b="function"==typeof a&&a.constructor;return !!b&&(b===f||
  "GeneratorFunction"===(b.displayName||b.name))},a.mark=function(a){return Object.setPrototypeOf?Object.setPrototypeOf(a,g):(a.__proto__=g,b(a,v,"GeneratorFunction")),a.prototype=Object.create(A),a},a.awrap=function(a){return {__await:a}},h(i.prototype),i.prototype[u]=function(){return this},a.AsyncIterator=i,a.async=function(b,d,e,f,g){void 0===g&&(g=Promise);var h=new i(c(b,d,e,f),g);return a.isGeneratorFunction(d)?h
  :h.next().then(function(a){return a.done?a.value:h.next()})},h(A),b(A,v,"Generator"),A[t]=function(){return this},A.toString=function(){return "[object Generator]"},a.keys=function(a){var b=[];for(var c in a)b.push(c);
  return b.reverse(),function c(){for(;b.length;){var d=b.pop();if(d in a)return c.value=d,c.done=!1,c}
  return c.done=!0,c}},a.values=o,n.prototype={constructor:n,reset:function reset(a){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(m),!a)for(var b in this)
  "t"===b.charAt(0)&&r.call(this,b)&&!isNaN(+b.slice(1))&&(this[b]=void 0);},stop:function stop(){this.done=!0;var a=this.tryEntries[0],b=a.completion;if("throw"===b.type)throw b.arg;return this.rval},dispatchException:function dispatchException(a){function b(b,d){return f.type="throw",f.arg=a,c.next=b,d&&(c.method="next",c.arg=void 0),!!d}if(this.done)throw a;for(var c=this,d=this.tryEntries.length-1;0<=d;--d){var e=this.tryEntries[d],f=e.completion;if("root"===e.tryLoc)
  return b("end");if(e.tryLoc<=this.prev){var g=r.call(e,"catchLoc"),h=r.call(e,"finallyLoc");if(g&&h){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);if(this.prev<e.finallyLoc)return b(e.finallyLoc)}else if(g){if(this.prev<e.catchLoc)return b(e.catchLoc,!0);}else if(!h)throw new Error("try statement without catch or finally");else if(this.prev<e.finallyLoc)return b(e.finallyLoc)}}},abrupt:function abrupt(a,b){for(var c,d=this.tryEntries.length-1;0<=d;--d)if(c=this.tryEntries[d],c.tryLoc<=this.prev&&r.call(c,"finallyLoc")&&this.prev<c.finallyLoc){var e=c;break}e&&("break"===a||"continue"===a)&&e.tryLoc<=b&&b<=e.finallyLoc&&(e=null);var f=e?e.completion:{};return f.type=a,f.arg=b,e?(this.method="next",this.next=e.finallyLoc,w):this.complete(f)},complete:function complete(a,b){if("throw"===a.type)throw a.arg;return "break"===a.type||"continue"===a.type?this.next=a.arg:"return"===a.type?(this.rval=this.arg=a.arg,this.method="return",this.next="end"):"normal"===a.type&&b&&(this.next=b),w},finish:function finish(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.finallyLoc===a)return this.complete(b.completion,b.afterLoc),m(b),w},catch:function _catch(a){for(var b,c=this.tryEntries.length-1;0<=c;--c)if(b=this.tryEntries[c],b.tryLoc===a){var d=b.completion;if("throw"===d.type){var e=d.arg;m(b);}return e}
  throw new Error("illegal catch attempt")},delegateYield:function delegateYield(a,b,c){return this.delegate={iterator:o(a),resultName:b,nextLoc:c},"next"===this.method&&(this.arg=void 0),w}},a}(
  a.exports);try{regeneratorRuntime=b;}catch(a){
  Function("r","regeneratorRuntime = r")(b);}});

  var regenerator=runtime_1;

  function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value;}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e);}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a);}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a);}var h=a.apply(b,c);f(void 0);})}}var asyncToGenerator=_asyncToGenerator;

  var timeoutSeconds=45,timeoutMilliseconds=45000;
  var timeoutWarning=setTimeout(function(){updateLoaderWarning("Preview is taking a very long time to load (more than ".concat(timeoutSeconds," seconds).<br />Try pressing \"preview\" again from the WordPress edit screen.<br />If you see this again, your preview builds are either slow or there's something wrong."));},timeoutMilliseconds);function showError(a){var b=document.getElementById("preview");b.style.display="none";var c=document.getElementById("loader");c.style.display="none";var d=document.getElementById("error-message-element");d.textContent="".concat(a.message).concat(a.context?":\n".concat(a.context):"");var e=document.querySelector(".content.error");e.style.display="block","NO_PAGE_CREATED_FOR_PREVIEWED_NODE"===a.message?document.getElementById("troubleshooting-html-area").innerHTML="\n\t\t\t<p>If you're not a developer, please screenshot this page and send it to your developer.<br /><br /><b>Note:</b> Once this error is fixed, you'll need to press \"preview\" again to clear out this message.<br/><br/>Gatsby wasn't able to find a page for the post you're trying to preview. This can mean one of three things:\n\t\t\t</p>\n\t\t\t<ol>\n\t\t\t\t <li>A page is not being built for the post being previewed.</li>\n\t\t\t\t <li>The id of this post is not being included in the pageContext of it's Gatsby page.</li>\n\t\t\t\t <li>An error was thrown in Gatsby during Preview sourcing (check your logs).</li>\n\t\t\t</ol>\n\t\t\t<br /> \n\t\t\t<p>\n\t\t\t\t<b>Hint:</b> if you want to account for any possible post type (even those that haven't yet been registered) you can use the WpContentNode interface as a fallback template in gatsby-node.js when you're creating pages and you'll never see this message when registering new post types.\n\t\t\t</p>\t\t\t\n\t\t":"GATSBY_PREVIEW_PROCESS_ERROR"===a.message&&(document.getElementById("troubleshooting-html-area").innerHTML="\n\t\t\t<p>If you're not a developer, please screenshot this page and send it to your developer.<br /><br /><b>Note:</b> Once this error is fixed, you'll need to press \"preview\" again to clear out this message.<br/><br/>The Gatsby Preview process errored while sourcing this preview.<br />Please check your error logs for additional information.\n\t\t\t</p>\t\t\t\n\t\t");}function updateLoaderWarning(a){var b=document.getElementById("preview-loader-warning");b.innerHTML="".concat(a,"<br /><br /><button id=\"cancel-button\" onclick=\"cancelPreviewLoader()\">Cancel and Troubleshoot</button>"),b.style.display="initial";var c=document.getElementById("cancel-button");c.addEventListener("keypress",function(a){"Enter"===a.key&&cancelPreviewLoader();}),c.addEventListener("click",cancelPreviewLoader);}function cancelPreviewLoader(){showError("Preview was cancelled.");}

  var previewStatusQuery="\n\tquery PREVIEW_STATUS_QUERY($postId: Float!) {\n\t\twpGatsby {\n\t\t\tgatsbyPreviewStatus(nodeId: $postId) {\n\t\t\t\tpageNode {\n\t\t\t\t\tpath\n\t\t\t\t}\n\t\t\t\tstatusType\n\t\t\t\tremoteStatusType\n\t\t\t\tstatusContext\n\t\t\t}\n\t\t}\n\t}\n";
  function fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function _fetchPreviewStatusAndUpdateUI(){return _fetchPreviewStatusAndUpdateUI=asyncToGenerator(regenerator.mark(function a(){var b,c,d,e,f,g,h,i,j,k,l,m,n,o=arguments;return regenerator.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return d=0<o.length&&void 0!==o[0]?o[0]:{},e=d.refetchCount,f=void 0===e?0:e,g=d.refetchDelay,h=void 0===g?500:g,a.next=3,fetch("/?".concat(initialState.graphqlEndpoint),{method:"POST",body:JSON.stringify({query:previewStatusQuery,variables:{postId:initialState.postId}}),headers:{"Content-Type":"application/json"}});case 3:return a.next=5,a.sent.json();case 5:if(i=a.sent,j=(null===i||void 0===i||null===(b=i.data)||void 0===b||null===(c=b.wpGatsby)||void 0===c?void 0:c.gatsbyPreviewStatus)||{},k=j.statusType,l=j.remoteStatusType,m=j.statusContext,!["NO_PAGE_CREATED_FOR_PREVIEWED_NODE","GATSBY_PREVIEW_PROCESS_ERROR"].includes(l)){a.next=11;break}throw console.log({response:i}),clearTimeout(timeoutWarning),{message:l,context:m};case 11:if("PREVIEW_READY"!==k){a.next=15;break}return clearTimeout(timeoutWarning),onPreviewReadyUpdateUI(i),a.abrupt("return");case 15:return n={
  30:1e3,
  50:2e3,
  70:5e3},f++,h=n[f]||h,a.next=20,new Promise(function(a){return setTimeout(function(){console.log({previewStatusCheck:{response:i,refetchCount:f,refetchDelay:h}}),console.log("Preview not yet updated, retrying..."),a();},h)});case 20:return a.next=22,fetchPreviewStatusAndUpdateUI({refetchCount:f,refetchDelay:h});case 22:case"end":return a.stop();}},a)})),_fetchPreviewStatusAndUpdateUI.apply(this,arguments)}function onPreviewReadyUpdateUI(a){var b,c,d=(null===a||void 0===a||null===(b=a.data)||void 0===b?void 0:b.wpGatsby)||{},e=d.gatsbyPreviewStatus;if(console.log({previewReady:{gatsbyPreviewStatus:e}}),!e||!e.statusType||null===e||void 0===e||null===(c=e.pageNode)||void 0===c||!c.path)throw Error("Received an improper response from the Preview server.");var f=document.getElementById("preview");
  f.addEventListener("load",onIframeLoadedHideLoaderUI),f.src=initialState.previewFrontendUrl+e.pageNode.path;}function onIframeLoadedHideLoaderUI(){var a=document.getElementById("loader");
  setTimeout(function(){
  a.classList.add("loaded"),setTimeout(function(){
  a.style.display="none";},100);},50);}

  asyncToGenerator(regenerator.mark(function a(){return regenerator.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,start();case 3:a.next=9;break;case 5:a.prev=5,a.t0=a["catch"](0),console.error(a.t0),"complete"===document.readyState||"loaded"===document.readyState?showError(a.t0):document.addEventListener("DOMContentLoaded",function(){showError(a.t0);});case 9:case"end":return a.stop();}},a,null,[[0,5]])}))();function start(){return _start.apply(this,arguments)}function _start(){return _start=asyncToGenerator(regenerator.mark(function a(){var b,c,d;return regenerator.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.next=2,Promise.all([
  initialState.previewWebhookIsOnline&&fetchPreviewStatusAndUpdateUI(),
  fetch(initialState.previewFrontendUrl)]);case 2:if(b=a.sent,c=slicedToArray(b,2),d=c[1],!d.ok){a.next=11;break}if(initialState.previewWebhookIsOnline){a.next=9;break}return a.next=9,fetchPreviewStatusAndUpdateUI();case 9:a.next=12;break;case 11:throw Error("The Gatsby Preview instance can't be reached.");case 12:case"end":return a.stop();}},a)})),_start.apply(this,arguments)}

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
